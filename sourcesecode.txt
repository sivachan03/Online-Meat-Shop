meatshop_project/accounts/accounts.py
from django.contrib import admin
from django.contrib.auth.admin import UserAdmin
from django.contrib.auth.models import User
from django.utils.html import format_html
from django.urls import reverse
from .models import Profile

class ProfileInline(admin.StackedInline):
    model = Profile
    can_delete = False
    verbose_name_plural = 'Profile'
    fk_name = 'user'

class CustomUserAdmin(UserAdmin):
    inlines = (ProfileInline,)
    list_display = ('username', 'email', 'first_name', 'last_name', 'is_staff', 'get_phone', 'get_orders')
    list_select_related = ('profile',)
    
    def get_phone(self, obj):
        try:
            return obj.profile.phone
        except Profile.DoesNotExist:
            return '-'
    get_phone.short_description = 'Phone'
    
    def get_orders(self, obj):
        orders_count = obj.orders.count()
        if orders_count > 0:
            url = reverse('admin:orders_order_changelist') + f'?user__id__exact={obj.id}'
            return format_html('<a href="{}">{} orders</a>', url, orders_count)
        return '0 orders'
    get_orders.short_description = 'Orders'
    
    def get_inline_instances(self, request, obj=None):
        if not obj:
            return list()
        return super(CustomUserAdmin, self).get_inline_instances(request, obj)

# Unregister the default UserAdmin and register our custom one
admin.site.unregister(User)
admin.site.register(User, CustomUserAdmin)

@admin.register(Profile)
class ProfileAdmin(admin.ModelAdmin):
    list_display = ['user', 'phone', 'address', 'city', 'postal_code']
    raw_id_fields = ['user']
    search_fields = ['user__username', 'user__email', 'phone', 'address', 'city']
apps.py
from django.apps import AppConfig

class AccountsConfig(AppConfig):
    default_auto_field = 'django.db.models.BigAutoField'
    name = 'accounts'

forms.py
from django import forms
from django.contrib.auth.models import User
from django.contrib.auth.forms import UserCreationForm
from .models import Profile

class UserRegistrationForm(UserCreationForm):
    email = forms.EmailField(required=True)
    
    class Meta:
        model = User
        fields = ['username', 'email', 'password1', 'password2']

class UserEditForm(forms.ModelForm):
    class Meta:
        model = User
        fields = ['first_name', 'last_name', 'email']

class ProfileEditForm(forms.ModelForm):
    class Meta:
        model = Profile
        fields = ['phone', 'address', 'postal_code', 'city']




models.py
from django.db import models
from django.contrib.auth.models import User

class Profile(models.Model):
    user = models.OneToOneField(User, on_delete=models.CASCADE)
    phone = models.CharField(max_length=15, blank=True)
    address = models.CharField(max_length=250, blank=True)
    postal_code = models.CharField(max_length=20, blank=True)
    city = models.CharField(max_length=100, blank=True)
    
    def __str__(self):
        return f'Profile for {self.user.username}'

urls.py

from django.urls import path
from django.contrib.auth import views as auth_views
from . import views

urlpatterns = [
    path('register/', views.register, name='register'),
    path('login/', auth_views.LoginView.as_view(template_name='account/login.html'), name='login'),
    path('logout/', auth_views.LogoutView.as_view(), name='logout'),
    path('profile/', views.profile, name='profile'),
    path('edit/', views.edit, name='edit'),
]

views.py

from django.shortcuts import render, redirect
from django.contrib.auth.decorators import login_required
from django.contrib import messages
from .forms import UserRegistrationForm, UserEditForm, ProfileEditForm
from .models import Profile

def register(request):
    if request.method == 'POST':
        user_form = UserRegistrationForm(request.POST)
        if user_form.is_valid():
            # Create a new user object but don't save it yet
            new_user = user_form.save(commit=False)
            # Save the User object
            new_user.save()
            # Check if the user already has a profile
            if not hasattr(new_user, 'profile'):
                Profile.objects.create(user=new_user)
            messages.success(request, 'Account created successfully. You can now log in.')
            return redirect('login')
    else:
        user_form = UserRegistrationForm()
    
    return render(request, 'account/register.html', {'user_form': user_form})

@login_required
def profile(request):
    return render(request, 'accounts/profile.html')

@login_required
def edit(request):
    if request.method == 'POST':
        user_form = UserEditForm(instance=request.user, data=request.POST)
        try:
            profile = request.user.profile
        except Profile.DoesNotExist:
            profile = Profile.objects.create(user=request.user)
        
        profile_form = ProfileEditForm(instance=profile, data=request.POST)
        
        if user_form.is_valid() and profile_form.is_valid():
            user_form.save()
            profile_form.save()
            messages.success(request, 'Profile updated successfully')
            return redirect('profile')
        else:
            messages.error(request, 'Error updating your profile')
    else:
        user_form = UserEditForm(instance=request.user)
        try:
            profile_form = ProfileEditForm(instance=request.user.profile)
        except Profile.DoesNotExist:
            profile = Profile.objects.create(user=request.user)
            profile_form = ProfileEditForm(instance=profile)
    
    return render(request, 'accounts/edit.html', {'user_form': user_form, 'profile_form': profile_form})
meatshop_project/carts

apps.py
from django.apps import AppConfig

class CartConfig(AppConfig):
    default_auto_field = 'django.db.models.BigAutoField'
    name = 'cart'
cart.py
from decimal import Decimal
from django.conf import settings
from shop.models import Product

class Cart:
    def __init__(self, request):
        """Initialize the cart."""
        self.session = request.session
        cart = self.session.get(settings.CART_SESSION_ID)
        if not cart:
            # Save an empty cart in the session
            cart = self.session[settings.CART_SESSION_ID] = {}
        self.cart = cart
    
    def add(self, product, quantity=1, override_quantity=False):
        """Add a product to the cart or update its quantity."""
        product_id = str(product.id)
        if product_id not in self.cart:
            self.cart[product_id] = {'quantity': 0, 'price': str(product.price)}
        
        if override_quantity:
            self.cart[product_id]['quantity'] = quantity
        else:
            self.cart[product_id]['quantity'] += quantity
        
        self.save()
    
    def save(self):
        # Mark the session as "modified" to make sure it gets saved
        self.session.modified = True
    
    def remove(self, product):
        """Remove a product from the cart."""
        product_id = str(product.id)
        if product_id in self.cart:
            del self.cart[product_id]
            self.save()
    
    def __iter__(self):
        """Iterate over the items in the cart and get the products from the database."""
        product_ids = self.cart.keys()
        # Get the product objects and add them to the cart
        products = Product.objects.filter(id__in=product_ids)
        
        cart = self.cart.copy()
        for product in products:
            cart[str(product.id)]['product'] = product
        
        for item in cart.values():
            item['price'] = Decimal(item['price'])
            item['total_price'] = item['price'] * item['quantity']
            yield item
    
    def __len__(self):
        """Count all items in the cart."""
        return sum(item['quantity'] for item in self.cart.values())
    
    def get_total_price(self):
        return sum(Decimal(item['price']) * item['quantity'] for item in self.cart.values())
    
    def clear(self):
        # Remove cart from session
        del self.session[settings.CART_SESSION_ID]
        self.save()

context_process.py
from .cart import Cart

def cart(request):
    return {'cart': Cart(request)}

forms.py
from django import forms

PRODUCT_QUANTITY_CHOICES = [(i, str(i)) for i in range(1, 21)]

class CartAddProductForm(forms.Form):
    quantity = forms.TypedChoiceField(choices=PRODUCT_QUANTITY_CHOICES, coerce=int)
    override = forms.BooleanField(required=False, initial=False, widget=forms.HiddenInput)




urls.py
from django.urls import path
from . import views

app_name = 'cart'

urlpatterns = [
    path('', views.cart_detail, name='cart_detail'),
    path('add/<int:product_id>/', views.cart_add, name='cart_add'),
    path('remove/<int:product_id>/', views.cart_remove, name='cart_remove'),
]


view.py 

from django.shortcuts import render, redirect, get_object_or_404
from django.views.decorators.http import require_POST
from shop.models import Product
from .cart import Cart
from .forms import CartAddProductForm

@require_POST
def cart_add(request, product_id):
    cart = Cart(request)
    product = get_object_or_404(Product, id=product_id)
    form = CartAddProductForm(request.POST)
    
    if form.is_valid():
        cd = form.cleaned_data
        cart.add(product=product, quantity=cd['quantity'], override_quantity=cd['override'])
    
    return redirect('cart:cart_detail')

@require_POST
def cart_remove(request, product_id):
    cart = Cart(request)
    product = get_object_or_404(Product, id=product_id)
    cart.remove(product)
    return redirect('cart:cart_detail')

def cart_detail(request):
    cart = Cart(request)
    for item in cart:
        item['update_quantity_form'] = CartAddProductForm(initial={
            'quantity': item['quantity'],
            'override': True
        })
    return render(request, 'cart/detail.html', {'cart': cart})


meatshop/dashboard.admin.py

from django.contrib import admin
from django.urls import path
from django.shortcuts import render
from django.db.models import Sum, Count, Avg
from django.utils import timezone
from datetime import timedelta
from shop.models import Product, Category
from orders.models import Order, OrderItem

class DashboardAdmin(admin.AdminSite):
    site_header = 'Premium Meat Shop Administration'
    site_title = 'Meat Shop Admin'
    index_title = 'Management Dashboard'
    
    def get_urls(self):
        urls = super().get_urls()
        custom_urls = [
            path('dashboard/', self.admin_view(self.dashboard_view), name='dashboard'),
        ]
        return custom_urls + urls
    
    def dashboard_view(self, request):
        # Get date ranges
        today = timezone.now().date()
        start_of_week = today - timedelta(days=today.weekday())
        start_of_month = today.replace(day=1)
        
        # Sales statistics
        total_sales = Order.objects.filter(paid=True).aggregate(
            total=Sum('items__price'))['total'] or 0
        
        sales_today = Order.objects.filter(
            paid=True, created__date=today).aggregate(
            total=Sum('items__price'))['total'] or 0
            
        sales_this_week = Order.objects.filter(
            paid=True, created__date__gte=start_of_week).aggregate(
            total=Sum('items__price'))['total'] or 0
            
        sales_this_month = Order.objects.filter(
            paid=True, created__date__gte=start_of_month).aggregate(
            total=Sum('items__price'))['total'] or 0
        
        # Order statistics
        total_orders = Order.objects.count()
        pending_orders = Order.objects.filter(status='pending').count()
        processing_orders = Order.objects.filter(status='processing').count()
        shipped_orders = Order.objects.filter(status='shipped').count()
        
        # Product statistics
        total_products = Product.objects.count()
        out_of_stock = Product.objects.filter(stock=0).count()
        low_stock = Product.objects.filter(stock__gt=0, stock__lte=5).count()
        
        # Top selling products
        top_products = OrderItem.objects.values(
            'product__name').annotate(
            total_sold=Sum('quantity')).order_by('-total_sold')[:5]
        
        # Recent orders
        recent_orders = Order.objects.order_by('-created')[:10]
        
        context = {
            'title': 'Dashboard',
            'total_sales': total_sales,
            'sales_today': sales_today,
            'sales_this_week': sales_this_week,
            'sales_this_month': sales_this_month,
            'total_orders': total_orders,
            'pending_orders': pending_orders,
            'processing_orders': processing_orders,
            'shipped_orders': shipped_orders,
            'total_products': total_products,
            'out_of_stock': out_of_stock,
            'low_stock': low_stock,
            'top_products': top_products,
            'recent_orders': recent_orders,
        }
        
        return render(request, 'admin/dashboard.html', context)

# Create a custom admin site
dashboard_site = DashboardAdmin(name='dashboard')

# Register models with the custom admin site
dashboard_site.register(Product)
dashboard_site.register(Category)
dashboard_site.register(Order)



meatshop_project/meatshop



admin.py
from django.contrib import admin
from django.utils.html import format_html

# Customize admin site
admin.site.site_header = 'Premium Meat Shop Administration'
admin.site.site_title = 'Meat Shop Admin'
admin.site.index_title = 'Management Dashboard'


asgi.py
import os
from django.core.asgi import get_asgi_application

os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'meatshop.settings')
application = get_asgi_application()

settings.py

import os
from pathlib import Path

# Build paths inside the project like this: BASE_DIR / 'subdir'.
#BASE_DIR = Path(__file__).resolve().parent.parent
#BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))
BASE_DIR = Path(__file__).resolve().parent.parent
# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-h3$#j7n2j3h4k2j3h4k2j3h4k2j3h4k2j3h4k2j3h'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = []

# Application definition
INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'shop.apps.ShopConfig',
    'cart.apps.CartConfig',
    'orders.apps.OrdersConfig',
    'accounts.apps.AccountsConfig',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'meatshop.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [os.path.join(BASE_DIR, 'templates')],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
                'cart.context_processors.cart',
            ],
        },
    },
]

WSGI_APPLICATION = 'meatshop.wsgi.application'

# Database
DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': str(BASE_DIR / 'db.sqlite3'),

    }
}

# Password validation
AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

# Internationalization
LANGUAGE_CODE = 'en-us'
TIME_ZONE = 'UTC'
USE_I18N = True
USE_TZ = True

# Static files (CSS, JavaScript, Images)
STATIC_URL = 'static/'
STATIC_ROOT = os.path.join(BASE_DIR, 'static')
#STATICFILES_DIRS = [os.path.join(BASE_DIR, 'meatshop/static')]
STATIC_ROOT = os.path.join(BASE_DIR, "static") 
# Media files
MEDIA_URL = '/media/'
MEDIA_ROOT = os.path.join(BASE_DIR, 'media')

# Default primary key field type
DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# Cart session settings
CART_SESSION_ID = 'cart'

# Login URL
LOGIN_URL = 'login'
LOGIN_REDIRECT_URL = 'shop:product_list'
LOGOUT_REDIRECT_URL = 'shop:product_list'

# Fix for form rendering in admin
#FORM_RENDERER = 'django.forms.renderers.TemplatesSetting'
FORM_RENDERER = 'django.forms.renderers.DjangoTemplates'

urls.py

from django.contrib import admin
from django.urls import path, include
from django.conf import settings
from django.conf.urls.static import static

urlpatterns = [
    path('admin/', admin.site.urls),
    path('cart/', include('cart.urls', namespace='cart')),
    path('orders/', include('orders.urls', namespace='orders')),
    path('accounts/', include('accounts.urls')),
    path('', include('shop.urls', namespace='shop')),
]

if settings.DEBUG:
    urlpatterns += static(settings.MEDIA_URL, document_root=settings.MEDIA_ROOT)


wsgi.py

import os
from django.core.wsgi import get_wsgi_application

os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'meatshop.settings')
application = get_wsgi_application()

meatshop_project/orders

admin.py

from django.contrib import admin
from django.utils.html import format_html
from django.urls import reverse
from .models import Order, OrderItem

class OrderItemInline(admin.TabularInline):
    model = OrderItem
    raw_id_fields = ['product']
    extra = 0
    fields = ['product', 'price', 'quantity', 'get_total']
    readonly_fields = ['get_total']
    
    def get_total(self, obj):
        return obj.get_cost()
    get_total.short_description = 'Total'

@admin.register(Order)
class OrderAdmin(admin.ModelAdmin):
    list_display = ['id', 'user_link', 'first_name', 'last_name', 'email', 'city', 
                    'paid', 'status_colored', 'created', 'updated', 'order_total']
    list_filter = ['paid', 'status', 'created', 'updated']
    search_fields = ['first_name', 'last_name', 'email', 'address']
    inlines = [OrderItemInline]
   # list_editable = ['paid', 'status']
   # list_editable = ['status']
    date_hierarchy = 'created'
    ordering = ['-created']
    readonly_fields = ['order_total']
   
    fieldsets = (
        ('Customer Information', {
            'fields': (('first_name', 'last_name'), 'email', 'user')
        }),
        ('Shipping Information', {
            'fields': ('address', ('postal_code', 'city'))
        }),
        ('Order Status', {
            'fields': (('paid', 'status'), 'created', 'updated')
        }),
        ('Order Summary', {
            'fields': ('order_total',)
        }),
    )
    
    def user_link(self, obj):
        if obj.user:
            url = reverse('admin:auth_user_change', args=[obj.user.id])
            return format_html('<a href="{}">{}</a>', url, obj.user.username)
        return '-'
    user_link.short_description = 'User'
    
    def status_colored(self, obj):
        colors = {
            'pending': 'orange',
            'processing': 'blue',
            'shipped': 'purple',
            'delivered': 'green',
            'cancelled': 'red',
        }
        return format_html(
            '<span style="color: {};">{}</span>',
            colors.get(obj.status, 'black'),
            obj.get_status_display()
        )
    status_colored.short_description = 'Status'
    
    def order_total(self, obj):
        return f"${obj.get_total_cost()}"
    order_total.short_description = 'Order Total'
    
    def get_queryset(self, request):
        queryset = super().get_queryset(request)
        queryset = queryset.prefetch_related('items__product')
        return queryset
apps.py

from django.apps import AppConfig

class OrdersConfig(AppConfig):
    default_auto_field = 'django.db.models.BigAutoField'
    name = 'orders'

forms.py

from django import forms
from .models import Order

class OrderCreateForm(forms.ModelForm):
    class Meta:
        model = Order
        fields = ['first_name', 'last_name', 'email', 'address', 'postal_code', 'city']

models.py

from django.db import models
from shop.models import Product
from django.contrib.auth.models import User

class Order(models.Model):
    STATUS_CHOICES = (
        ('pending', 'Pending'),
        ('processing', 'Processing'),
        ('shipped', 'Shipped'),
        ('delivered', 'Delivered'),
        ('cancelled', 'Cancelled'),
    )
    
    user = models.ForeignKey(User, related_name='orders', on_delete=models.CASCADE, null=True, blank=True)
    first_name = models.CharField(max_length=50)
    last_name = models.CharField(max_length=50)
    email = models.EmailField()
    address = models.CharField(max_length=250)
    postal_code = models.CharField(max_length=20)
    city = models.CharField(max_length=100)
    created = models.DateTimeField(auto_now_add=True)
    updated = models.DateTimeField(auto_now=True)
    paid = models.BooleanField(default=False)
    status = models.CharField(max_length=10, choices=STATUS_CHOICES, default='pending')
    
    class Meta:
        ordering = ('-created',)
    
    def __str__(self):
        return f'Order {self.id}'
    
    def get_total_cost(self):
        return sum(item.get_cost() for item in self.items.all())

class OrderItem(models.Model):
    order = models.ForeignKey(Order, related_name='items', on_delete=models.CASCADE)
    product = models.ForeignKey(Product, related_name='order_items', on_delete=models.CASCADE)
    price = models.DecimalField(max_digits=10, decimal_places=2)
    quantity = models.PositiveIntegerField(default=1)
    
    def __str__(self):
        return str(self.id)
    
    def get_cost(self):
        return self.price * self.quantity



urls.py

from django.urls import path
from . import views

app_name = 'orders'

urlpatterns = [
    path('create/', views.order_create, name='order_create'),
    path('history/', views.order_history, name='order_history'),
    path('detail/<int:order_id>/', views.order_detail, name='order_detail'),
]

view.py

from django.shortcuts import render, redirect, get_object_or_404
from django.contrib.auth.decorators import login_required
from .models import OrderItem, Order
from .forms import OrderCreateForm
from cart.cart import Cart

def order_create(request):
    cart = Cart(request)
    if request.method == 'POST':
        form = OrderCreateForm(request.POST)
        if form.is_valid():
            order = form.save(commit=False)
            if request.user.is_authenticated:
                order.user = request.user
            order.save()
            
            for item in cart:
                OrderItem.objects.create(
                    order=order,
                    product=item['product'],
                    price=item['price'],
                    quantity=item['quantity']
                )
            
            # Clear the cart
            cart.clear()
            return render(request, 'orders/order/created.html', {'order': order})
    else:
        form = OrderCreateForm()
    
    return render(request, 'orders/order/create.html', {'cart': cart, 'form': form})

@login_required
def order_history(request):
    orders = Order.objects.filter(user=request.user)
    return render(request, 'orders/order/history.html', {'orders': orders})

@login_required
def order_detail(request, order_id):
    order = get_object_or_404(Order, id=order_id, user=request.user)
    return render(request, 'orders/order/detail.html', {'order': order})



meatshop_project/shop/

admin.py

from django.contrib import admin
from django.utils.html import format_html
from .models import Category, Product

@admin.register(Category)
class CategoryAdmin(admin.ModelAdmin):
    list_display = ['name', 'slug', 'description_preview', 'image_preview']
    prepopulated_fields = {'slug': ('name',)}
    search_fields = ['name', 'description']
    list_filter = ['name']
    def description_preview(self, obj):
        return obj.description[:50] + '...' if len(obj.description) > 50 else obj.description
    description_preview.short_description = 'Description'
    
    def image_preview(self, obj):
        if obj.image:
            return format_html('<img src="{}" width="50" height="50" />', obj.image.url)
        return "No Image"
    image_preview.short_description = 'Image'

@admin.register(Product)
class ProductAdmin(admin.ModelAdmin):
    list_display = ['name', 'slug', 'category', 'price', 'weight', 'stock', 'available', 'image_preview', 'created', 'updated']
    list_filter = ['available', 'created', 'updated', 'category']
    list_editable = ['price', 'stock', 'available']
    prepopulated_fields = {'slug': ('name',)}
    search_fields = ['name', 'description']
    date_hierarchy = 'created'
    ordering = ['name']
    readonly_fields = ['image_full']
    fieldsets = (
        ('Basic Information', {
            'fields': ('name', 'slug', 'category', 'description')
        }),
        ('Pricing & Inventory', {
            'fields': ('price', 'weight', 'stock', 'available')
        }),
        ('Media', {
            'fields': ('image', 'image_full')
        }),
        #('Timestamps', {
            #'fields': ('created', 'updated'),
           # 'classes': ('collapse',)
        #}),
    )
    
    def image_preview(self, obj):
        if obj.image:
            return format_html('<img src="{}" width="30" height="30" />', obj.image.url)
        return "No Image"
    image_preview.short_description = 'Image'
    
    def image_full(self, obj):
        if obj.image:
            return format_html('<img src="{}" width="300" />', obj.image.url)
        return "No Image"
    image_full.short_description = 'Image Preview'


apps.py

from django.apps import AppConfig

class ShopConfig(AppConfig):
    default_auto_field = 'django.db.models.BigAutoField'
    name = 'shop'

models.py

from django.db import models
from django.urls import reverse

class Category(models.Model):
    name = models.CharField(max_length=200)
    slug = models.SlugField(max_length=200, unique=True)
    description = models.TextField(blank=True)
    image = models.ImageField(upload_to='categories/%Y/%m/%d', blank=True)
    
    class Meta:
        ordering = ('name',)
        verbose_name = 'category'
        verbose_name_plural = 'categories'
    
    def __str__(self):
        return self.name
    
    def get_absolute_url(self):
        return reverse('shop:product_list_by_category', args=[self.slug])

class Product(models.Model):
    category = models.ForeignKey(Category, related_name='products', on_delete=models.CASCADE)
    name = models.CharField(max_length=200)
    slug = models.SlugField(max_length=200, unique=True)
    image = models.ImageField(upload_to='products/%Y/%m/%d', blank=True)
    description = models.TextField(blank=True)
    price = models.DecimalField(max_digits=10, decimal_places=2)
    weight = models.DecimalField(max_digits=5, decimal_places=2, help_text="Weight in kg")
    stock = models.PositiveIntegerField()
    available = models.BooleanField(default=True)
    created = models.DateTimeField(auto_now_add=True)
    updated = models.DateTimeField(auto_now=True)
    featured = models.BooleanField(default=False, help_text="Featured products appear on homepage")
    discount_price = models.DecimalField(max_digits=10, decimal_places=2, blank=True, null=True, help_text="Discounted price (optional)")
    
    class Meta:
        ordering = ('name',)
        indexes = [
            models.Index(fields=['id', 'slug']),
            models.Index(fields=['name']),
            models.Index(fields=['created']),
        ]
    
    def __str__(self):
        return self.name
    
    def get_absolute_url(self):
        return reverse('shop:product_detail', args=[self.id, self.slug])
    
    def get_discount_percent(self):
        if self.discount_price:
            discount = ((self.price - self.discount_price) / self.price) * 100
            return int(discount)
        return 0



urls.py


from django.urls import path
from . import views

app_name = 'shop'

urlpatterns = [
    path('', views.product_list, name='product_list'),
    path('category/<slug:category_slug>/', views.product_list, name='product_list_by_category'),
    path('<int:id>/<slug:slug>/', views.product_detail, name='product_detail'),
]


views.py


from django.shortcuts import render, get_object_or_404
from .models import Category, Product
from cart.forms import CartAddProductForm

def product_list(request, category_slug=None):
    category = None
    categories = Category.objects.all()
    products = Product.objects.filter(available=True)
    
    if category_slug:
        category = get_object_or_404(Category, slug=category_slug)
        products = products.filter(category=category)
    
    return render(request, 'shop/product/list.html', {
        'category': category,
        'categories': categories,
        'products': products
    })

def product_detail(request, id, slug):
    product = get_object_or_404(Product, id=id, slug=slug, available=True)
    cart_product_form = CartAddProductForm()
    
    return render(request, 'shop/product/detail.html', {
        'product': product,
        'cart_product_form': cart_product_form
    })



meatshop/templates/account/edit.html

{% extends "base.html" %}
{% block title %}Edit Profile{% endblock %}

{% block content %}
    <div class="card">
        <div class="card-header bg-meat text-white">
            <h2>Edit Profile</h2>
        </div>
        <div class="card-body">
            <form method="post">
                {% csrf_token %}
                <div class="row">
                    <div class="col-md-6">
                        <h5>Account Information</h5>
                        {% for field in user_form %}
                            <div class="mb-3">
                                <label for="{{ field.id_for_label }}" class="form-label">{{ field.label }}</label>
                                {{ field }}
                                {% if field.errors %}
                                    <div class="text-danger">
                                        {{ field.errors }}
                                    </div>
                                {% endif %}
                            </div>
                        {% endfor %}
                    </div>
                    <div class="col-md-6">
                        <h5>Contact Information</h5>
                        {% for field in profile_form %}
                            <div class="mb-3">
                                <label for="{{ field.id_for_label }}" class="form-label">{{ field.label }}</label>
                                {{ field }}
                                {% if field.errors %}
                                    <div class="text-danger">
                                        {{ field.errors }}
                                    </div>
                                {% endif %}
                            </div>
                        {% endfor %}
                    </div>
                </div>
                <button type="submit" class="btn btn-meat">Save Changes</button>
                <a href="{% url 'profile' %}" class="btn btn-outline-secondary ms-2">Cancel</a>
            </form>
        </div>
    </div>
{% endblock %}


login.html


{% extends "base.html" %}

{% block title %}Log In{% endblock %}

{% block content %}
<div class="container">
    <h2>Log In</h2>
    <form method="post">
        {% csrf_token %}
        {{ form.as_p }}
        <button type="submit" class="btn btn-primary">Log In</button>
    </form>
</div>
{% endblock %}

profile.html


{% extends "base.html" %}
{% block title %}My Profile{% endblock %}

{% block content %}
    <div class="card">
        <div class="card-header bg-meat text-white">
            <h2>My Profile</h2>
        </div>
        <div class="card-body">
            <div class="row">
                <div class="col-md-6">
                    <h5>Account Information</h5>
                    <p><strong>Username:</strong> {{ user.username }}</p>
                    <p><strong>Email:</strong> {{ user.email }}</p>
                    <p><strong>Name:</strong> {{ user.first_name }} {{ user.last_name }}</p>
                </div>
                <div class="col-md-6">
                    <h5>Contact Information</h5>
                    {% if user.profile %}
                        <p><strong>Phone:</strong> {{ user.profile.phone|default:"Not provided" }}</p>
                        <p><strong>Address:</strong> {{ user.profile.address|default:"Not provided" }}</p>
                        <p><strong>City:</strong> {{ user.profile.city|default:"Not provided" }}, {{ user.profile.postal_code|default:"" }}</p>
                    {% else %}
                        <p>No profile information available.</p>
                    {% endif %}
                </div>
            </div>
            <div class="mt-4">
                <a href="{% url 'edit' %}" class="btn btn-meat">Edit Profile</a>
                <a href="{% url 'orders:order_history' %}" class="btn btn-outline-secondary ms-2">View Orders</a>
            </div>
        </div>
    </div>
{% endblock %}


rigister.html


{% extends "base.html" %}

{% block title %}Register{% endblock %}

{% block content %}
<div class="container">
    <h2>Register</h2>
    <form method="post">
        {% csrf_token %}
        {{ user_form.as_p }}
        <button type="submit" class="btn btn-primary">Register</button>
    </form>
</div>
{% endblock %}
</create_file>

meatshop/templates/admin/dashboard.html
{% extends "admin/base_site.html" %}
{% load static %}

{% block extrastyle %}
<style>
    .dashboard-container {
        display: grid;
        grid-template-columns: repeat(auto-fill, minmax(300px, 1fr));
        gap: 20px;
        margin-bottom: 20px;
    }
    .dashboard-card {
        background-color: #fff;
        border-radius: 4px;
        box-shadow: 0 1px 3px rgba(0,0,0,0.12), 0 1px 2px rgba(0,0,0,0.24);
        padding: 20px;
    }
    .dashboard-card h3 {
        margin-top: 0;
        border-bottom: 1px solid #eee;
        padding-bottom: 10px;
        color: #8B0000;
    }
    .stat-value {
        font-size: 24px;
        font-weight: bold;
        margin: 10px 0;
    }
    .stat-label {
        color: #666;
        font-size: 14px;
    }
    .stat-grid {
        display: grid;
        grid-template-columns: repeat(2, 1fr);
        gap: 15px;
    }
    .stat-box {
        background-color: #f9f9f9;
        border-radius: 4px;
        padding: 15px;
        text-align: center;
    }
    .table-responsive {
        overflow-x: auto;
    }
    table {
        width: 100%;
        border-collapse: collapse;
    }
    th, td {
        padding: 8px;
        text-align: left;
        border-bottom: 1px solid #ddd;
    }
    th {
        background-color: #f2f2f2;
    }
    .status-pending { color: orange; }
    .status-processing { color: blue; }
    .status-shipped { color: purple; }
    .status-delivered { color: green; }
    .status-cancelled { color: red; }
</style>
{% endblock %}

{% block content %}
<h1>Dashboard</h1>

<div class="dashboard-container">
    <!-- Sales Overview -->
    <div class="dashboard-card">
        <h3>Sales Overview</h3>
        <div class="stat-value">${{ total_sales }}</div>
        <div class="stat-label">Total Sales</div>
        
        <div class="stat-grid">
            <div class="stat-box">
                <div class="stat-value">${{ sales_today }}</div>
                <div class="stat-label">Today</div>
            </div>
            <div class="stat-box">
                <div class="stat-value">${{ sales_this_week }}</div>
                <div class="stat-label">This Week</div>
            </div>
            <div class="stat-box">
                <div class="stat-value">${{ sales_this_month }}</div>
                <div class="stat-label">This Month</div>
            </div>
        </div>
    </div>
    
    <!-- Order Status -->
    <div class="dashboard-card">
        <h3>Order Status</h3>
        <div class="stat-value">{{ total_orders }}</div>
        <div class="stat-label">Total Orders</div>
        
        <div class="stat-grid">
            <div class="stat-box">
                <div class="stat-value">{{ pending_orders }}</div>
                <div class="stat-label">Pending</div>
            </div>
            <div class="stat-box">
                <div class="stat-value">{{ processing_orders }}</div>
                <div class="stat-label">Processing</div>
            </div>
            <div class="stat-box">
                <div class="stat-value">{{ shipped_orders }}</div>
                <div class="stat-label">Shipped</div>
            </div>
        </div>
    </div>
    
    <!-- Inventory Status -->
    <div class="dashboard-card">
        <h3>Inventory Status</h3>
        <div class="stat-value">{{ total_products }}</div>
        <div class="stat-label">Total Products</div>
        
        <div class="stat-grid">
            <div class="stat-box">
                <div class="stat-value">{{ out_of_stock }}</div>
                <div class="stat-label">Out of Stock</div>
            </div>
            <div class="stat-box">
                <div class="stat-value">{{ low_stock }}</div>
                <div class="stat-label">Low Stock</div>
            </div>
        </div>
    </div>
</div>

<div class="dashboard-container">
    <!-- Top Selling Products -->
    <div class="dashboard-card">
        <h3>Top Selling Products</h3>
        <div class="table-responsive">
            <table>
                <thead>
                    <tr>
                        <th>Product</th>
                        <th>Units Sold</th>
                    </tr>
                </thead>
                <tbody>
                    {% for product in top_products %}
                    <tr>
                        <td>{{ product.product__name }}</td>
                        <td>{{ product.total_sold }}</td>
                    </tr>
                    {% empty %}
                    <tr>
                        <td colspan="2">No sales data available</td>
                    </tr>
                    {% endfor %}
                </tbody>
            </table>
        </div>
    </div>
    
    <!-- Recent Orders -->
    <div class="dashboard-card">
        <h3>Recent Orders</h3>
        <div class="table-responsive">
            <table>
                <thead>
                    <tr>
                        <th>Order #</th>
                        <th>Customer</th>
                        <th>Date</th>
                        <th>Status</th>
                    </tr>
                </thead>
                <tbody>
                    {% for order in recent_orders %}
                    <tr>
                        <td>{{ order.id }}</td>
                        <td>{{ order.first_name }} {{ order.last_name }}</td>
                        <td>{{ order.created|date:"M d, Y" }}</td>
                        <td class="status-{{ order.status }}">{{ order.get_status_display }}</td>
                    </tr>
                    {% empty %}
                    <tr>
                        <td colspan="4">No recent orders</td>
                    </tr>
                    {% endfor %}
                </tbody>
            </table>
        </div>
    </div>
</div>
{% endblock %}
meatshop/templates/cart/details.html



{% extends "base.html" %}
{% block title %}Your Shopping Cart{% endblock %}

{% block content %}
    <div class="card">
        <div class="card-header bg-meat text-white">
            <h2>Your Shopping Cart</h2>
        </div>
        <div class="card-body">
            <table class="table table-striped">
                <thead>
                    <tr>
                        <th>Image</th>
                        <th>Product</th>
                        <th>Quantity</th>
                        <th>Unit Price</th>
                        <th>Price</th>
                        <th>Remove</th>
                    </tr>
                </thead>
                <tbody>
                    {% for item in cart %}
                        {% with product=item.product %}
                            <tr>
                                <td>
                                    <a href="{{ product.get_absolute_url }}">
                                        {% if product.image %}
                                            <img src="{{ product.image.url }}" alt="{{ product.name }}" style="width: 50px; height: auto;">
                                        {% else %}
                                            <img src="/media/no-image.jpg" alt="No image available" style="width: 50px; height: auto;">
                                        {% endif %}
                                    </a>
                                </td>
                                <td>{{ product.name }}</td>
                                <td>
                                    <form action="{% url 'cart:cart_add' product.id %}" method="post" class="d-flex align-items-center">
                                        {{ item.update_quantity_form.quantity }}
                                        {{ item.update_quantity_form.override }}
                                        {% csrf_token %}
                                        <button type="submit" class="btn btn-sm btn-outline-secondary ms-2">Update</button>
                                    </form>
                                </td>
                                <td>${{ item.price }}</td>
                                <td>${{ item.total_price }}</td>
                                <td>
                                    <form action="{% url 'cart:cart_remove' product.id %}" method="post">
                                        {% csrf_token %}
                                        <button type="submit" class="btn btn-sm btn-danger">Remove</button>
                                    </form>
                                </td>
                            </tr>
                        {% endwith %}
                    {% empty %}
                        <tr>
                            <td colspan="6" class="text-center">Your cart is empty.</td>
                        </tr>
                    {% endfor %}
                    {% if cart|length > 0 %}
                        <tr class="table-active">
                            <td colspan="4" class="text-end fw-bold">Total</td>
                            <td class="fw-bold">${{ cart.get_total_price }}</td>
                            <td></td>
                        </tr>
                    {% endif %}
                </tbody>
            </table>
            
            <div class="d-flex justify-content-between mt-4">
                <a href="{% url 'shop:product_list' %}" class="btn btn-outline-secondary">Continue Shopping</a>
                {% if cart|length > 0 %}
                    <a href="{% url 'orders:order_create' %}" class="btn btn-meat">Checkout</a>
                {% endif %}
            </div>
        </div>
    </div>
{% endblock %}



django/forms/errors/list/default.html

91<ul class="errorlist">
    {% for error in errors %}
        <li>{{ error }}</li>
    {% endfor %}
</ul>
django/forms/errors/p.html

<p>
    {{ field }}
    {% if field.errors %}
        <ul class="errorlist">
            {% for error in field.errors %}
                <li>{{ error }}</li>
            {% endfor %}
        </ul>
    {% endif %}
    {% if field.help_text %}
        <span class="helptext">{{ field.help_text }}</span>
    {% endif %}
</p>
meatshop_project/templates/orders/order/create.html
{% extends "base.html" %}
{% block title %}Checkout{% endblock %}

{% block content %}
    <div class="row">
        <div class="col-md-8">
            <div class="card">
                <div class="card-header bg-meat text-white">
                    <h2>Checkout</h2>
                </div>
                <div class="card-body">
                    <form method="post" class="order-form">
                        {% csrf_token %}
                        <div class="row">
                            <div class="col-md-6 mb-3">
                                <label for="{{ form.first_name.id_for_label }}" class="form-label">First Name</label>
                                {{ form.first_name.errors }}
                                {{ form.first_name }}
                            </div>
                            <div class="col-md-6 mb-3">
                                <label for="{{ form.last_name.id_for_label }}" class="form-label">Last Name</label>
                                {{ form.last_name.errors }}
                                {{ form.last_name }}
                            </div>
                        </div>
                        <div class="mb-3">
                            <label for="{{ form.email.id_for_label }}" class="form-label">Email</label>
                            {{ form.email.errors }}
                            {{ form.email }}
                        </div>
                        <div class="mb-3">
                            <label for="{{ form.address.id_for_label }}" class="form-label">Address</label>
                            {{ form.address.errors }}
                            {{ form.address }}
                        </div>
                        <div class="row">
                            <div class="col-md-6 mb-3">
                                <label for="{{ form.postal_code.id_for_label }}" class="form-label">Postal Code</label>
                                {{ form.postal_code.errors }}
                                {{ form.postal_code }}
                            </div>
                            <div class="col-md-6 mb-3">
                                <label for="{{ form.city.id_for_label }}" class="form-label">City</label>
                                {{ form.city.errors }}
                                {{ form.city }}
                            </div>
                        </div>
                        <button type="submit" class="btn btn-meat">Place Order</button>
                    </form>
                </div>
            </div>
        </div>
        <div class="col-md-4">
            <div class="card">
                <div class="card-header bg-meat text-white">
                    <h4>Order Summary</h4>
                </div>
                <div class="card-body">
                    <table class="table">
                        <tbody>
                            {% for item in cart %}
                                <tr>
                                    <td>{{ item.product.name }} × {{ item.quantity }}</td>
                                    <td class="text-end">${{ item.total_price }}</td>
                                </tr>
                            {% endfor %}
                            <tr class="table-active">
                                <td class="fw-bold">Total</td>
                                <td class="text-end fw-bold">${{ cart.get_total_price }}</td>
                            </tr>
                        </tbody>
                    </table>
                </div>
            </div>
        </div>
    </div>
{% endblock %}


meatshop_project/templates/orders/order/created.html

{% extends "base.html" %}
{% block title %}Order Placed{% endblock %}

{% block content %}
    <div class="card">
        <div class="card-header bg-meat text-white">
            <h2>Thank You!</h2>
        </div>
        <div class="card-body text-center">
            <p class="lead">Your order has been successfully placed.</p>
            <p>Your order number is <strong>{{ order.id }}</strong>.</p>
            <p>We'll send you an email confirmation shortly.</p>
            <a href="{% url 'shop:product_list' %}" class="btn btn-meat mt-3">Continue Shopping</a>
        </div>
    </div>
{% endblock %}

meatshop_project/templates/orders/order/detail.html


{% extends "base.html" %}
{% block title %}Order #{{ order.id }}{% endblock %}

{% block content %}
    <div class="card mb-4">
        <div class="card-header bg-meat text-white">
            <h2>Order #{{ order.id }}</h2>
        </div>
        <div class="card-body">
            <div class="row">
                <div class="col-md-6">
                    <h5>Order Information</h5>
                    <p><strong>Date:</strong> {{ order.created|date:"F j, Y, P" }}</p>
                    <p><strong>Status:</strong> 
                        <span class="badge {% if order.status == 'delivered' %}bg-success{% elif order.status == 'cancelled' %}bg-danger{% else %}bg-warning{% endif %}">
                            {{ order.get_status_display }}
                        </span>
                    </p>
                    <p><strong>Total:</strong> ${{ order.get_total_cost }}</p>
                </div>
                <div class="col-md-6">
                    <h5>Shipping Information</h5>
                    <p><strong>Name:</strong> {{ order.first_name }} {{ order.last_name }}</p>
                    <p><strong>Address:</strong> {{ order.address }}</p>
                    <p><strong>City:</strong> {{ order.city }}, {{ order.postal_code }}</p>
                    <p><strong>Email:</strong> {{ order.email }}</p>
                </div>
            </div>
        </div>
    </div>

    <div class="card">
        <div class="card-header bg-meat text-white">
            <h4>Order Items</h4>
        </div>
        <div class="card-body">
            <table class="table table-striped">
                <thead>
                    <tr>
                        <th>Product</th>
                        <th>Price</th>
                        <th>Quantity</th>
                        <th>Total</th>
                    </tr>
                </thead>
                <tbody>
                    {% for item in order.items.all %}
                        <tr>
                            <td>{{ item.product.name }}</td>
                            <td>${{ item.price }}</td>
                            <td>{{ item.quantity }}</td>
                            <td>${{ item.get_cost }}</td>
                        </tr>
                    {% endfor %}
                    <tr class="table-active">
                        <td colspan="3" class="text-end fw-bold">Total</td>
                        <td class="fw-bold">${{ order.get_total_cost }}</td>
                    </tr>
                </tbody>
            </table>
        </div>
    </div>
{% endblock %}

meatshop_project/templates/orders/order/create.html


{% extends "base.html" %}
{% block title %}Order History{% endblock %}

{% block content %}
    <div class="card">
        <div class="card-header bg-meat text-white">
            <h2>Order History</h2>
        </div>
        <div class="card-body">
            <table class="table table-striped">
                <thead>
                    <tr>
                        <th>Order #</th>
                        <th>Date</th>
                        <th>Total</th>
                        <th>Status</th>
                        <th>Actions</th>
                    </tr>
                </thead>
                <tbody>
                    {% for order in orders %}
                        <tr>
                            <td>{{ order.id }}</td>
                            <td>{{ order.created|date:"M d, Y" }}</td>
                            <td>${{ order.get_total_cost }}</td>
                            <td>
                                <span class="badge {% if order.status == 'delivered' %}bg-success{% elif order.status == 'cancelled' %}bg-danger{% else %}bg-warning{% endif %}">
                                    {{ order.get_status_display }}
                                </span>
                            </td>
                            <td>
                                <a href="{% url 'orders:order_detail' order.id %}" class="btn btn-sm btn-outline-secondary">View Details</a>
                            </td>
                        </tr>
                    {% empty %}
                        <tr>
                            <td colspan="5" class="text-center">You haven't placed any orders yet.</td>
                        </tr>
                    {% endfor %}
                </tbody>
            </table>
        </div>
    </div>
{% endblock %}



meatshop_project/templates/shop/details.html

{% extends "base.html" %}
{% block title %}{{ product.name }}{% endblock %}

{% block content %}
    <div class="row">
        <div class="col-md-6">
            <div class="card mb-4">
                {% if product.image %}
                    <img src="{{ product.image.url }}" class="card-img-top" alt="{{ product.name }}">
                {% else %}
                    <img src="/media/no-image.jpg" class="card-img-top" alt="No image available">
                {% endif %}
            </div>
        </div>
        <div class="col-md-6">
            <div class="card">
                <div class="card-header bg-meat text-white">
                    <h2>{{ product.name }}</h2>
                </div>
                <div class="card-body">
                    <p class="card-text">
                        <a href="{{ product.category.get_absolute_url }}" class="text-decoration-none">
                            {{ product.category }}
                        </a>
                    </p>
                    <p class="card-text">Weight: {{ product.weight }}kg</p>
                    <p class="card-text">{{ product.description|linebreaks }}</p>
                    <p class="card-text meat-primary fw-bold fs-3">${{ product.price }}</p>
                    
                    <form action="{% url 'cart:cart_add' product.id %}" method="post" class="mt-4">
                        {{ cart_product_form }}
                        {% csrf_token %}
                        <button type="submit" class="btn btn-meat btn-lg mt-2">Add to cart</button>
                    </form>
                </div>
            </div>
        </div>
    </div>
{% endblock %}

meatshop_project/templates/shop/list.html
{% extends "base.html" %}
{% block title %}
    {% if category %}{{ category.name }}{% else %}Products{% endif %}
{% endblock %}

{% block content %}
    <div class="row">
        <div class="col-md-3">
            <div class="card mb-4">
                <div class="card-header bg-meat text-white">
                    <h4>Categories</h4>
                </div>
                <div class="list-group list-group-flush">
                    <a href="{% url 'shop:product_list' %}" class="list-group-item list-group-item-action {% if not category %}active{% endif %}">
                        All Products
                    </a>
                    {% for c in categories %}
                        <a href="{{ c.get_absolute_url }}" class="list-group-item list-group-item-action {% if category.slug == c.slug %}active{% endif %}">
                            {{ c.name }}
                        </a>
                    {% endfor %}
                </div>
            </div>
        </div>
        <div class="col-md-9">
            <div class="card">
                <div class="card-header bg-meat text-white">
                    <h4>{% if category %}{{ category.name }}{% else %}All Products{% endif %}</h4>
                </div>
                <div class="card-body">
                    <div class="row">
                        {% for product in products %}
                            <div class="col-md-4 mb-4">
                                <div class="card h-100">
                                    <a href="{{ product.get_absolute_url }}">
                                        {% if product.image %}
                                            <img src="{{ product.image.url }}" class="card-img-top" alt="{{ product.name }}">
                                        {% else %}
                                            <img src="/media/no-image.jpg" class="card-img-top" alt="No image available">
                                        {% endif %}
                                    </a>
                                    <div class="card-body">
                                        <h5 class="card-title">
                                            <a href="{{ product.get_absolute_url }}" class="text-decoration-none text-dark">
                                                {{ product.name }}
                                            </a>
                                        </h5>
                                        <p class="card-text text-muted">{{ product.weight }}kg</p>
                                        <p class="card-text meat-primary fw-bold">${{ product.price }}</p>
                                    </div>
                                    <div class="card-footer bg-transparent border-top-0">
                                        <a href="{{ product.get_absolute_url }}" class="btn btn-meat w-100">View Details</a>
                                    </div>
                                </div>
                            </div>
                        {% empty %}
                            <div class="col-12">
                                <p>No products found in this category.</p>
                            </div>
                        {% endfor %}
                    </div>
                </div>
            </div>
        </div>
    </div>
{% endblock %}

meatshop_project/templates/shop/product/base.html


<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <title>{% block title %}Premium Meat Shop{% endblock %}</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0-alpha1/dist/css/bootstrap.min.css" rel="stylesheet">
    <style>
        .meat-primary { color: #8B0000; }
        .bg-meat { background-color: #8B0000; }
        .btn-meat { background-color: #8B0000; color: white; }
        .btn-meat:hover { background-color: #6B0000; color: white; }
    </style>
</head>
<body>
    <header class="p-3 mb-3 border-bottom">
        <div class="container">
            <div class="d-flex flex-wrap align-items-center justify-content-center justify-content-lg-start">
                <a href="/" class="d-flex align-items-center mb-2 mb-lg-0 text-decoration-none">
                    <h2 class="meat-primary">Premium Meat Shop</h2>
                </a>

                <ul class="nav col-12 col-lg-auto me-lg-auto mb-2 justify-content-center mb-md-0 ms-3">
                    <li><a href="{% url 'shop:product_list' %}" class="nav-link px-2 link-dark">Home</a></li>
                    <li class="nav-item dropdown">
                        <a class="nav-link dropdown-toggle link-dark" href="#" role="button" data-bs-toggle="dropdown">
                            Categories
                        </a>
                        <ul class="dropdown-menu">
                            {% for c in categories %}
                                <li><a class="dropdown-item" href="{{ c.get_absolute_url }}">{{ c.name }}</a></li>
                            {% endfor %}
                        </ul>
                    </li>
                    <li><a href="{% url 'cart:cart_detail' %}" class="nav-link px-2 link-dark">
                        Cart
                        {% with total_items=cart|length %}
                            {% if total_items > 0 %}
                                <span class="badge bg-meat">{{ total_items }}</span>
                            {% endif %}
                        {% endwith %}
                    </a></li>
                </ul>

                <div class="text-end">
                    {% if request.user.is_authenticated %}
                        <div class="dropdown text-end">
                            <a href="#" class="d-block link-dark text-decoration-none dropdown-toggle" data-bs-toggle="dropdown">
                                {{ request.user.username }}
                            </a>
                            <ul class="dropdown-menu text-small">
                                <li><a class="dropdown-item" href="{% url 'profile' %}">Profile</a></li>
                                <li><a class="dropdown-item" href="{% url 'orders:order_history' %}">My Orders</a></li>
                                <li><hr class="dropdown-divider"></li>
                                <li><a class="dropdown-item" href="{% url 'logout' %}">Sign out</a></li>
                            </ul>
                        </div>
                    {% else %}
                        <a href="{% url 'login' %}" class="btn btn-outline-dark me-2">Login</a>
                        <a href="{% url 'register' %}" class="btn btn-meat">Sign-up</a>
                    {% endif %}
                </div>
            </div>
        </div>
    </header>

    <main class="container my-4">
        {% if messages %}
            {% for message in messages %}
                <div class="alert alert-{{ message.tags }}">
                    {{ message }}
                </div>
            {% endfor %}
        {% endif %}
        
        {% block content %}
        {% endblock %}
    </main>

    <footer class="py-3 my-4">
        <div class="container">
            <p class="text-center text-muted">© 2023 Premium Meat Shop</p>
        </div>
    </footer>

    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0-alpha1/dist/js/bootstrap.bundle.min.js"></script>
</body>
</html>


meatshop_project /manage.py


#!/usr/bin/env python
"""Django's command-line utility for administrative tasks."""
import os
import sys


def main():
    """Run administrative tasks."""
    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'meatshop.settings')
    try:
        from django.core.management import execute_from_command_line
    except ImportError as exc:
        raise ImportError(
            "Couldn't import Django. Are you sure it's installed and "
            "available on your PYTHONPATH environment variable? Did you "
            "forget to activate a virtual environment?"
        ) from exc
    execute_from_command_line(sys.argv)


if __name__ == '__main__':
    main()
